services:
  kafka:
    image: bitnami/kafka:3.6.1
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_ENABLE_KRAFT: "yes"
      KAFKA_CFG_PROCESS_ROLES: "broker,controller"
      KAFKA_CFG_NODE_ID: "1"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - microservices-network
  postgres_orders:
    image: postgres:17
    container_name: postgres_orders
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=db_Orders
      - POSTGRES_USER=orders_user
      - POSTGRES_PASSWORD=orders_password

    volumes:
      - postgres_orders_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U orders_user -d db_Orders"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices-network
  postgres_items:
    image: postgres:17
    container_name: postgres_items
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_DB=db_Items
      - POSTGRES_USER=items_user
      - POSTGRES_PASSWORD=items_password

    volumes:
      - postgres_items_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U items_user -d db_Items"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices-network
  order-service:
    build: ./order-service
    container_name: order-service
    ports:
      - "8080:8080"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres_orders:5432/db_Orders
      - SPRING_DATASOURCE_USERNAME=orders_user
      - SPRING_DATASOURCE_PASSWORD=orders_password
      - KAFKA_PRODUCER_BOOTSTRAP_SERVER=kafka:9092
    depends_on:
      kafka:
        condition: service_started
      postgres_orders:
        condition: service_healthy
    networks:
      - microservices-network

  warehouse-service:
    build: ./warehouse-service
    container_name: warehouse-service
    ports:
      - "8081:8081"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres_items:5432/db_Items
      - SPRING_DATASOURCE_USERNAME=items_user
      - SPRING_DATASOURCE_PASSWORD=items_password
      - KAFKA_PRODUCER_BOOTSTRAP_SERVER=kafka:9092
      - KAFKA_CONSUMER_BOOTSTRAP_SERVER=kafka:9092
      - ORDER_SERVICE_URL=http://order-service:8080
    depends_on:
      kafka:
        condition: service_started
      postgres_items:
        condition: service_healthy
    networks:
      - microservices-network
volumes:
  kafka_data:
  postgres_orders_data:
    driver: local
  postgres_items_data:
    driver: local
networks:
  microservices-network:
    driver: bridge